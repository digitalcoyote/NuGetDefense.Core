using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using MessagePack;
using NuGetDefense.Core;

namespace NuGetDefense
{
    public static class VulnerabilityData
    {
        /// <summary>
        ///     Saves the bin file. Internally, this passes in a Timeout of Timespan.Zero.
        /// </summary>
        /// <param name="vulnerabilityDictionary"></param>
        /// <param name="binPath"></param>
        public static void SaveToBinFile(
            Dictionary<string, Dictionary<string, VulnerabilityEntry>> vulnerabilityDictionary,
            string binPath)
        {
            SaveToBinFile(vulnerabilityDictionary, binPath, TimeSpan.Zero);
        }

        /// <summary>
        ///     Saves the bin file using the provided timeout to retry if the save fails.
        /// </summary>
        /// <param name="vulnerabilityDictionary"></param>
        /// <param name="binPath"></param>
        /// <param name="timeout"></param>
        /// <exception cref="TimeoutException"></exception>
        public static void SaveToBinFile(
            Dictionary<string, Dictionary<string, VulnerabilityEntry>> vulnerabilityDictionary,
            string binPath, TimeSpan timeout)
        {
            var lz4Options = MessagePackSerializerOptions.Standard.WithCompression(MessagePackCompression.Lz4BlockArray)
                .WithSecurity(MessagePackSecurity.UntrustedData);

            var dictBytes = MessagePackSerializer
                .Serialize(vulnerabilityDictionary, lz4Options);

            var limit = DateTime.Now.Add(timeout);
            bool retry;
            using var file = new FileStream(binPath, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite, 64 * 1024, FileOptions.None);
            
            do
            {
                try
                {
                    file.Write(dictBytes, 0, dictBytes.Length);
                    break;
                }
                catch (Exception e)
                {
                    retry = DateTime.Now <= limit;
                    if (retry == false)
                        throw new TimeoutException(
                            $"Saving vulnerability data to bin failed:'{binPath}'", e);
                }
            } while (retry);
        }

        /// <summary>
        ///     Removes CVE's from the vulnerability reports if they are in the ignoredCVEs list
        /// </summary>
        /// <param name="vulnDict"></param>
        /// <param name="IgnoredCVEs">CVE's to ignore and not report as vulnerabilities</param>
        public static void IgnoreCVEs(Dictionary<string, Dictionary<string, Vulnerability>> vulnDict,
            string[] IgnoredCVEs)
        {
            foreach (var cve in vulnDict.Values.SelectMany(vuln => IgnoredCVEs.Where(cve => vuln.Remove(cve))))
                Console.WriteLine($"Ignoring {cve}");
        }

        public static Dictionary<string, Dictionary<string, VulnerabilityEntry>> LoadFromBinFile(string binPath)
        {
            var lz4Options = MessagePackSerializerOptions.Standard.WithCompression(MessagePackCompression.Lz4BlockArray)
                .WithSecurity(MessagePackSecurity.UntrustedData);
            var vulnDataFile = binPath;

            using var nvdData = File.Open(vulnDataFile, FileMode.Open, FileAccess.Read, FileShare.Read);
            return MessagePackSerializer
                .Deserialize<
                    Dictionary<string, Dictionary<string, VulnerabilityEntry>>>(nvdData, lz4Options);
        }
    }
}