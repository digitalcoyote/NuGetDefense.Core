using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using FluentAssertions.Common;
using NuGetDefense;
using NuGetDefense.Core;
using Xunit;
using Xunit.Abstractions;

namespace CoreTests
{
    public class VulnerabilityDataTests
    {
        private readonly ITestOutputHelper _testOutputHelper;

        public VulnerabilityDataTests(ITestOutputHelper testOutputHelper) => _testOutputHelper = testOutputHelper;

        [Fact]
        public void SaveLoadVulnerabilityData()
        {
            var testVulnDict = new Dictionary<string, Dictionary<string, VulnerabilityEntry>>
            {
                {
                    "Test",
                    new Dictionary<string, VulnerabilityEntry>
                    {
                        {
                            "CVE-Test",
                            new VulnerabilityEntry
                            {
                                Cwe = "Test-CWE",
                                Vector = Vulnerability.AccessVectorType.NETWORK,
                                Vendor = "Test Vendor",
                                Versions = ["1.1.1", "1.2.5"],
                                Description = "Test Description",
                                References = ["Test Reference"],
                                Score = 4.3M
                            }
                        }
                    }
                }
            };

            Task.Run(() =>
            {
                _testOutputHelper.WriteLine("Locking File");
                using var file = File.Open("TestVulnerabilityData.bin", FileMode.Open, FileAccess.ReadWrite,
                    FileShare.None);
                Thread.Sleep(TimeSpan.FromSeconds(5));
                _testOutputHelper.WriteLine("Releasing File");
                file.Close();
            });
            Thread.Sleep(TimeSpan.FromSeconds(1));
            _testOutputHelper.WriteLine("Reading File");
            VulnerabilityData.SaveToBinFile(testVulnDict, "TestVulnerabilityData.bin", TimeSpan.FromSeconds(10));
            var loadedVulnBinDict = VulnerabilityData.LoadFromBinFile("TestVulnerabilityData.bin");
            testVulnDict.Count.Should().Be(loadedVulnBinDict.Count);
            foreach (var (key, value) in testVulnDict)
            {
                var testValue = loadedVulnBinDict[key];
                Assert.Equal(testValue.Count, value.Count);
                foreach (var (innerKey, innerValue) in value)
                {
                    Assert.Equal(innerValue.Cwe, loadedVulnBinDict[key][innerKey].Cwe);
                    Assert.Equal(innerValue.Description, loadedVulnBinDict[key][innerKey].Description);
                    Assert.Equal(innerValue.References, loadedVulnBinDict[key][innerKey].References);
                    Assert.Equal(innerValue.Score, loadedVulnBinDict[key][innerKey].Score);
                    Assert.Equal(innerValue.Vector, loadedVulnBinDict[key][innerKey].Vector);
                    Assert.Equal(innerValue.Versions, loadedVulnBinDict[key][innerKey].Versions);
                }
            }
        }

        [Fact]
        public void IgnoreCves()
        {
            var testVulnDict = new Dictionary<string, Dictionary<string, Vulnerability>>
            {
                {
                    "Test",
                    new Dictionary<string, Vulnerability>
                    {
                        {
                            "CVE-Test",
                            new Vulnerability(
                                "CVE-Test",
                                4.0M,
                                "Test-CWE",
                                "Test Description",
                                ["Test Reference"],
                                Vulnerability.AccessVectorType.NETWORK,
                                "Test Vendor"
                            )
                        }
                    }
                }
            };
            
            VulnerabilityData.IgnoreCVEs(testVulnDict, ["CVE-Test"]);
            Assert.Empty(testVulnDict["Test"]);
        }
    }
}